"use strict";
/*
 * Copyright 2021 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isClusterRoleProps = exports.clusterRoleResourceInfo = exports.ClusterRole = void 0;
const tslib_1 = require("tslib");
const core_1 = tslib_1.__importStar(require("@adpt/core"));
const k8s_observer_1 = require("./k8s_observer");
const manifest_support_1 = require("./manifest_support");
const Resource_1 = require("./Resource");
const defaultProps = {
    metadata: {}
};
/**
 * k8s ClusterRole resource
 *
 * @param propsIn - props for ServiceAccount as specifed in {@link k8s.ClusterRoleProps}
 *
 * @public
 */
function ClusterRole(propsIn) {
    const _a = propsIn, { handle, key, config, metadata } = _a, rest = tslib_1.__rest(_a, ["handle", "key", "config", "metadata"]);
    return core_1.default.createElement(Resource_1.Resource, Object.assign({ key: key, apiVersion: "rbac.authorization.k8s.io/v1", kind: "ClusterRole", config: config, metadata: metadata }, rest));
}
exports.ClusterRole = ClusterRole;
// TODO: The "as any" is a workaround for an api-extractor bug. See issue #185.
ClusterRole.defaultProps = defaultProps;
/** @internal */
exports.clusterRoleResourceInfo = {
    kind: "ClusterRole",
    deployedWhen: () => true,
    statusQuery: async (props, observe, buildData) => {
        const obs = await observe(k8s_observer_1.K8sObserver, core_1.gql `
            query ($name: String!, $kubeconfig: JSON!) {
                withKubeconfig(kubeconfig: $kubeconfig) {
                    readRbacAuthorizationV1ClusterRole(name: $name) @all(depth: 100)
                }
            }`, {
            name: manifest_support_1.resourceIdToName(props.key, buildData.id, buildData.deployID),
            kubeconfig: props.config.kubeconfig,
        });
        return obs.withKubeconfig.readRbacAuthorizationV1ClusterRole;
    },
    makeManifest: (manifest, elem, _deployID) => {
        const { aggregationRule, rules } = elem.props;
        return Object.assign(Object.assign({}, manifest), { aggregationRule,
            rules });
    }
};
/** @public */
function isClusterRoleProps(props) {
    return props.kind === "ClusterRole";
}
exports.isClusterRoleProps = isClusterRoleProps;
manifest_support_1.registerResourceKind(exports.clusterRoleResourceInfo);
//# sourceMappingURL=ClusterRole.js.map