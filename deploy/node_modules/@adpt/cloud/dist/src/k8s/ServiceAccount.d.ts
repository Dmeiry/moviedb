import Adapt, { AdaptElement, BuildData, ObserveForStatus, SFCDeclProps } from "@adpt/core";
import { ClusterInfo, Metadata, ObjectReference, ResourceProps, ResourcePropsWithConfig, ResourceServiceAccount } from "./common";
import { Manifest } from "./manifest_support";
/**
 * Props for the {@link k8s.ServiceAccount} resource
 *
 * @public
 */
interface ServiceAccountProps {
    /** Information about the k8s cluster (ip address, auth info, etc.) */
    config: ClusterInfo;
    /** k8s metadata */
    metadata: Metadata;
    /**
     * automountServiceAccountToken indicates whether pods running as this service account
     * should have an API token automatically mounted. Can be overridden at the pod level.
     */
    automountServiceAccountToken?: boolean;
    /**
     * imagePullSecrets is a list of references to secrets in the same namespace to use for
     * pulling any images in pods that reference this ServiceAccount.
     *
     * ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod,
     * but ImagePullSecrets are only accessed by the kubelet. '
     *
     * More info: {@link https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod}
     */
    imagePullSecrets?: {
        name: string;
    }[];
    /**
     * Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount.
     *
     * More info: {@link https://kubernetes.io/docs/concepts/configuration/secret}
     */
    secrets?: ObjectReference[];
}
declare const defaultProps: {
    metadata: {};
};
/**
 * k8s ServiceAccount resource
 *
 * @param propsIn - props for ServiceAccount as specifed in {@link k8s.ServiceAccountProps}
 *
 * @public
 */
export declare function ServiceAccount(propsIn: SFCDeclProps<ServiceAccountProps, typeof defaultProps>): Adapt.JSX.Element;
/** @internal */
export declare const serviceAccountResourceInfo: {
    kind: string;
    deployedWhen: () => true;
    statusQuery: (props: ResourcePropsWithConfig, observe: ObserveForStatus, buildData: BuildData) => Promise<any>;
    makeManifest: (manifest: Manifest, elem: AdaptElement<ResourceProps>, _deployID: string) => {
        automountServiceAccountToken: boolean | undefined;
        imagePullSecrets: {
            name: string;
        }[] | undefined;
        secrets: ObjectReference[] | undefined;
        apiVersion: string;
        kind: string;
        metadata: import("./manifest_support").MetadataInRequest;
        spec?: import("./DaemonSet").DaemonSetSpec | import("./common").CRSpec | import("./Pod").PodSpec | import("./Service").ServiceSpec | import("./Deployment").DeploymentSpec | undefined;
    };
};
/** @public */
export declare function isServiceAccountProps(p: ResourceProps): p is ResourceProps & ResourceServiceAccount;
export {};
//# sourceMappingURL=ServiceAccount.d.ts.map