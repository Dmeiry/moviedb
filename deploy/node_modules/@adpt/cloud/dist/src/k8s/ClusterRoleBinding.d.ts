import Adapt, { AdaptElement, BuildData, Handle, ObserveForStatus, SFCDeclProps } from "@adpt/core";
import { ClusterInfo, Metadata, ResourceProps, ResourcePropsWithConfig, RoleRef, Subject } from "./common";
import { Manifest } from "./manifest_support";
/**
 * Props for the {@link k8s.ServiceAccount} resource
 *
 * @public
 */
interface ClusterRoleBindingProps {
    /** Information about the k8s cluster (ip address, auth info, etc.) */
    config: ClusterInfo;
    /** k8s metadata */
    metadata: Metadata;
    roleRef: RoleRef | Handle;
    subjects: (Subject | Handle)[];
}
declare const defaultProps: {
    metadata: {};
};
/**
 * k8s ClusterRoleBinding resource
 *
 * @param propsIn - props for ServiceAccount as specifed in {@link k8s.ClusterRoleBindingProps}
 *
 * @public
 */
export declare function ClusterRoleBinding(propsIn: SFCDeclProps<ClusterRoleBindingProps, typeof defaultProps>): Adapt.JSX.Element | null;
/** @internal */
export declare const clusterRoleBindingResourceInfo: {
    kind: string;
    deployedWhen: () => true;
    statusQuery: (props: ResourcePropsWithConfig, observe: ObserveForStatus, buildData: BuildData) => Promise<any>;
    makeManifest: (manifest: Manifest, elem: AdaptElement<ResourceProps>, _deployID: string) => {
        roleRef: RoleRef;
        subjects: Subject[];
        apiVersion: string;
        kind: string;
        metadata: import("./manifest_support").MetadataInRequest;
        spec?: import("./DaemonSet").DaemonSetSpec | import("./common").CRSpec | import("./Pod").PodSpec | import("./Service").ServiceSpec | import("./Deployment").DeploymentSpec | undefined;
    };
};
export {};
//# sourceMappingURL=ClusterRoleBinding.d.ts.map