"use strict";
/*
 * Copyright 2021 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.clusterRoleBindingResourceInfo = exports.ClusterRoleBinding = void 0;
const tslib_1 = require("tslib");
const core_1 = tslib_1.__importStar(require("@adpt/core"));
const utils_1 = require("@adpt/utils");
const ClusterRole_1 = require("./ClusterRole");
const k8s_observer_1 = require("./k8s_observer");
const manifest_support_1 = require("./manifest_support");
const Resource_1 = require("./Resource");
const ServiceAccount_1 = require("./ServiceAccount");
const utils_2 = require("./utils");
const defaultProps = {
    metadata: {}
};
/**
 * k8s ClusterRoleBinding resource
 *
 * @param propsIn - props for ServiceAccount as specifed in {@link k8s.ClusterRoleBindingProps}
 *
 * @public
 */
function ClusterRoleBinding(propsIn) {
    const { key, config, metadata, roleRef: roleRefIn, subjects: subjectsIn, } = propsIn;
    const { deployID } = core_1.useBuildHelpers();
    const [roleRef, updateRoleRef] = utils_2.useResource({
        initial: null,
        notReady: null,
        kinds: ["ClusterRole"],
        thisResourceName: "ClusterRole",
        propName: "roleRef",
    });
    const [subjects, updateSubjects] = utils_2.useResources({
        initial: [],
        notReady: undefined,
        kinds: ["ServiceAccount"],
        thisResourceName: "ClusterRole",
        propName: "subjects",
    });
    updateRoleRef(roleRefIn, (e, roleRefProps) => {
        if (ClusterRole_1.isClusterRoleProps(roleRefProps)) {
            return utils_1.removeUndef({
                apiGroup: (roleRefProps.apiVersion && roleRefProps.apiVersion.split("/")[0]),
                kind: roleRefProps.kind,
                name: manifest_support_1.resourceElementToName(e, deployID),
            });
        }
        throw new Error(`Cannot have k8s.ClusterRoleBinding with roleRef of kind ${roleRefProps.kind}, is not a ClusterRole.`);
    });
    updateSubjects(subjectsIn, async (e, subjectProps) => {
        var _a;
        if (ServiceAccount_1.isServiceAccountProps(subjectProps)) {
            return utils_1.removeUndef({
                apiGroup: (subjectProps.apiVersion && subjectProps.apiVersion.split("/")[0]) || "",
                kind: subjectProps.kind,
                name: manifest_support_1.resourceElementToName(e, deployID),
                namespace: ((_a = subjectProps.metadata) === null || _a === void 0 ? void 0 : _a.namespace) || "default",
            });
        }
        throw new Error(`Cannot have k8s.ClusterRoleBinding with subject of kind ${subjectProps.kind}, is not a ClusterRole.`);
    });
    if (roleRef === null)
        return null;
    return core_1.default.createElement(Resource_1.Resource, { key: key, apiVersion: "rbac.authorization.k8s.io/v1", kind: "ClusterRoleBinding", config: config, metadata: metadata, roleRef: roleRef, subjects: subjects.filter(utils_1.notNull) });
}
exports.ClusterRoleBinding = ClusterRoleBinding;
// TODO: The "as any" is a workaround for an api-extractor bug. See issue #185.
ClusterRoleBinding.defaultProps = defaultProps;
/** @internal */
exports.clusterRoleBindingResourceInfo = {
    kind: "ClusterRoleBinding",
    deployedWhen: () => true,
    statusQuery: async (props, observe, buildData) => {
        const obs = await observe(k8s_observer_1.K8sObserver, core_1.gql `
            query ($name: String!, $kubeconfig: JSON!) {
                withKubeconfig(kubeconfig: $kubeconfig) {
                    readRbacAuthorizationV1ClusterRoleBinding(name: $name) @all(depth: 100)
                }
            }`, {
            name: manifest_support_1.resourceIdToName(props.key, buildData.id, buildData.deployID),
            kubeconfig: props.config.kubeconfig,
        });
        return obs.withKubeconfig.readRbacAuthorizationV1ClusterRoleBinding;
    },
    makeManifest: (manifest, elem, _deployID) => {
        const { roleRef, subjects } = elem.props;
        return Object.assign(Object.assign({}, manifest), { roleRef,
            subjects });
    }
};
manifest_support_1.registerResourceKind(exports.clusterRoleBindingResourceInfo);
//# sourceMappingURL=ClusterRoleBinding.js.map