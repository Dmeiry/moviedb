import Adapt, { AdaptElement, BuildData, ObserveForStatus, SFCDeclProps } from "@adpt/core";
import { AggregationRule, ClusterInfo, Metadata, PolicyRule, ResourceClusterRole, ResourceProps, ResourcePropsWithConfig } from "./common";
import { Manifest } from "./manifest_support";
/**
 * Props for the {@link k8s.ServiceAccount} resource
 *
 * @public
 */
interface ClusterRoleProps {
    /** Information about the k8s cluster (ip address, auth info, etc.) */
    config: ClusterInfo;
    /** k8s metadata */
    metadata: Metadata;
    /**
     * AggregationRule is an optional field that describes how to build the Rules
     * for this ClusterRole.
     *
     * If AggregationRule is set, then the Rules are controller managed and direct
     * changes to Rules will be stomped by the controller.
     */
    aggregationRule?: AggregationRule;
    /**
     * Rules holds all the PolicyRules for this ClusterRole
     */
    rules?: PolicyRule[];
}
declare const defaultProps: {
    metadata: {};
};
/**
 * k8s ClusterRole resource
 *
 * @param propsIn - props for ServiceAccount as specifed in {@link k8s.ClusterRoleProps}
 *
 * @public
 */
export declare function ClusterRole(propsIn: SFCDeclProps<ClusterRoleProps, typeof defaultProps>): Adapt.JSX.Element;
/** @internal */
export declare const clusterRoleResourceInfo: {
    kind: string;
    deployedWhen: () => true;
    statusQuery: (props: ResourcePropsWithConfig, observe: ObserveForStatus, buildData: BuildData) => Promise<any>;
    makeManifest: (manifest: Manifest, elem: AdaptElement<ResourceProps>, _deployID: string) => {
        aggregationRule: AggregationRule | undefined;
        rules: PolicyRule[] | undefined;
        apiVersion: string;
        kind: string;
        metadata: import("./manifest_support").MetadataInRequest;
        spec?: import("./DaemonSet").DaemonSetSpec | import("./common").CRSpec | import("./Pod").PodSpec | import("./Service").ServiceSpec | import("./Deployment").DeploymentSpec | undefined;
    };
};
/** @public */
export declare function isClusterRoleProps(props: ResourceProps): props is ResourceProps & ResourceClusterRole;
export {};
//# sourceMappingURL=ClusterRole.d.ts.map