import { GraphQLFieldResolver, GraphQLObjectType, GraphQLScalarType, GraphQLSchema, GraphQLTypeResolver } from "graphql";
import { Swagger2 } from "../../src/swagger2gql/swagger_types";
export interface UnknownArgs {
    [name: string]: unknown;
}
declare type GQLFieldResolver<ObjectT = unknown, Context = unknown, Args = UnknownArgs> = GraphQLFieldResolver<ObjectT, Context, Args>;
declare type GQLTypeResolver<ObjectT = unknown, Context = unknown> = GraphQLTypeResolver<ObjectT, Context>;
declare type FieldResolverFactory<ObjectT = unknown, Context = unknown, Args = UnknownArgs> = (ty: GraphQLObjectType, field: string, isQueryType: boolean) => GQLFieldResolver<ObjectT, Context, Args> | undefined;
declare type TypeResolverFactory = (ty: GraphQLScalarType, field: undefined, isQueryType: boolean) => GQLTypeResolver | undefined;
export interface ResolverFactory<ObjectT = unknown, Context = unknown, Args = UnknownArgs> {
    fieldResolvers?: FieldResolverFactory<ObjectT, Context, Args>;
    typeResolvers?: TypeResolverFactory;
}
export declare function buildGraphQLSchema<ObjectT = unknown, Context = unknown, Args = UnknownArgs>(swagger: Swagger2, getResolver?: ResolverFactory<ObjectT, Context, Args>): GraphQLSchema;
export {};
//# sourceMappingURL=converter.d.ts.map