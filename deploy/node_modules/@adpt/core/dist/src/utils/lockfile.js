"use strict";
/*
 * Copyright 2019 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.lock = exports.lockDefaults = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("@adpt/utils");
const proper_lockfile_1 = tslib_1.__importDefault(require("proper-lockfile"));
exports.lockDefaults = {
    retries: 2,
    // 1 day if in the debugger, otherwise 10 sec
    stale: utils_1.inDebugger() ? 24 * 60 * 60 * 1000 : 10 * 1000,
};
async function lock(filename, lockDescr, options = {}) {
    try {
        return await proper_lockfile_1.default.lock(filename, Object.assign(Object.assign(Object.assign({}, exports.lockDefaults), { onCompromised: (err) => {
                // This function executes during a timer event, so stack and
                // other error info is not useful. Just display the error
                // message to the user.
                throw new utils_1.UserError(`${lockDescr} error: ${err.message} (${filename})`);
            } }), options));
    }
    catch (err) {
        // Call stack has the chance to catch and react to this error
        err.message = `${err.message} (${filename})`;
        throw err;
    }
}
exports.lock = lock;
//# sourceMappingURL=lockfile.js.map