"use strict";
/*
 * Copyright 2018-2021 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveStack = exports.isNullStack = exports.nullStack = exports.stack = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("@adpt/utils");
const p_reflect_1 = tslib_1.__importDefault(require("p-reflect"));
const util_1 = require("util");
const error_1 = require("../error");
const ts_1 = require("../ts");
function stack(stackName, root, style = null) {
    const stacks = ts_1.getAdaptContext().adaptStacks;
    if (isNullStack(stackName))
        throw new Error(`Invalid stack name "${stackName}"`);
    const toStore = (typeof style === "function") ? style : p_reflect_1.default(Promise.resolve(style));
    stacks.set(stackName, { root, style: toStore });
}
exports.stack = stack;
function nullStack() {
    return { root: null, style: null };
}
exports.nullStack = nullStack;
function isNullStack(s) {
    if (util_1.isString(s))
        return s === "(null)";
    return s.root === null && s.style === null;
}
exports.isNullStack = isNullStack;
async function resolveStack(stackName, ctx) {
    const stacks = ctx.adaptStacks;
    if (!stacks)
        throw new error_1.InternalError(`No stacks found`);
    const stk = stacks.get(stackName);
    if (!stk)
        throw new utils_1.UserError(`Adapt stack '${stackName}' not found`);
    let root;
    let style;
    try {
        root = await stk.root;
    }
    catch (err) {
        err.message = `Error generated by stack root: ${err.message}`;
        throw err;
    }
    try {
        const styleIn = stk.style;
        if (styleIn == null) {
            style = styleIn;
        }
        else if (typeof styleIn === "function") {
            style = await styleIn();
        }
        else {
            const settled = await styleIn;
            if (settled.isFulfilled)
                style = settled.value;
            else
                throw settled.reason;
        }
    }
    catch (err) {
        err.message = `Error generated by stack style: ${err.message}`;
        throw err;
    }
    return {
        root,
        style,
    };
}
exports.resolveStack = resolveStack;
//# sourceMappingURL=stack.js.map