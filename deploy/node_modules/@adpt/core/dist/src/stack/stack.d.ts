import { MaybePromise } from "@adpt/utils";
import { PromiseResult } from "p-reflect";
import { AdaptElementOrNull } from "../jsx";
import { AdaptContext } from "../ts";
/**
 * A function that returns a `Style` element.
 * @public
 */
export declare type StyleFunc = () => MaybePromise<AdaptElementOrNull>;
/**
 * The possible types that can be used for the `style` argument to
 * the `stack` function.
 * @public
 */
export declare type StyleInput = MaybePromise<AdaptElementOrNull> | StyleFunc;
export interface Stack {
    root: AdaptElementOrNull | Promise<AdaptElementOrNull>;
    style: StyleFunc | Promise<PromiseResult<AdaptElementOrNull>> | null;
}
export declare type Stacks = Map<string, Stack>;
export declare function stack(stackName: string, root: AdaptElementOrNull | Promise<AdaptElementOrNull>, style?: StyleInput): void;
export declare function nullStack(): Stack;
export declare function isNullStack(s: string | Stack): boolean;
export interface ResolvedStack {
    root: AdaptElementOrNull;
    style: AdaptElementOrNull;
}
export declare function resolveStack(stackName: string, ctx: AdaptContext): Promise<ResolvedStack>;
//# sourceMappingURL=stack.d.ts.map