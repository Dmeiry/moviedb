import { MessageLogger } from "@adpt/utils";
import { DomDiff } from "../dom_utils";
import { AdaptElementOrNull, AdaptMountedElement } from "../jsx";
import { DeployOpID } from "../server";
import { Deployment } from "../server/deployment";
import { ActComplete, Action, ActOptions, EPPrimitiveDependencies, ExecutionPlan, GoalStatus, Plugin, PluginConfig, PluginInstances, PluginManager, PluginManagerStartOptions, PluginModules, PluginObservations, PluginRegistration } from "./deploy_types";
export declare function createPluginManager(modules: PluginModules): PluginManager;
/**
 * For testing only.
 */
export declare function isPluginManagerImpl(val: any): val is PluginManagerImpl;
declare enum PluginManagerState {
    Initial = "Initial",
    Starting = "Starting",
    PreObserve = "PreObserve",
    Observing = "Observing",
    PreAnalyze = "PreAnalyze",
    Analyzing = "Analyzing",
    PreAct = "PreAct",
    Acting = "Acting",
    PreFinish = "PreFinish",
    Finishing = "Finishing"
}
export declare function checkPrimitiveActions(diff: DomDiff, actions: Action[]): void;
interface AnyObservation {
    [name: string]: any;
}
declare class PluginManagerImpl implements PluginManager {
    modules: PluginModules;
    parallelActions: Action[];
    plugins: PluginInstances;
    state: PluginManagerState;
    deployment_?: Deployment;
    deployOpID_?: DeployOpID;
    goalStatus_?: GoalStatus;
    logger_?: MessageLogger;
    newDom_?: AdaptElementOrNull;
    newMountedElements_?: AdaptMountedElement[];
    observations: AnyObservation;
    prevDependencies_?: EPPrimitiveDependencies;
    prevDom_?: AdaptElementOrNull;
    prevMountedElements_?: AdaptMountedElement[];
    plan_?: ExecutionPlan;
    constructor(config: PluginConfig);
    transitionTo(next: PluginManagerState): void;
    start(opts: PluginManagerStartOptions): Promise<void>;
    observe(): Promise<PluginObservations>;
    analyze(): {
        actions: Action[];
        dependencies: EPPrimitiveDependencies;
    };
    addActions(actions: Action[], plugin: Plugin): void;
    act(options: ActOptions): Promise<ActComplete>;
    finish(): Promise<void>;
    get deployment(): Deployment;
    get deployOpID(): DeployOpID;
    get goalStatus(): GoalStatus;
    get logger(): MessageLogger;
    get newDom(): AdaptElementOrNull;
    get newMountedElements(): AdaptMountedElement[];
    get plan(): ExecutionPlan;
    get prevDependencies(): EPPrimitiveDependencies;
    get prevDom(): AdaptElementOrNull;
    get prevMountedElements(): AdaptMountedElement[];
    private get actions();
}
export declare function registerPlugin(plugin: PluginRegistration): void;
export declare function createPluginConfig(modules: PluginModules): PluginConfig;
export {};
//# sourceMappingURL=plugin_support.d.ts.map