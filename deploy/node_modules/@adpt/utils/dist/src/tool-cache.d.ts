import tar from "tar";
export interface FetchToCacheCommon {
    /** Short human-friendly name for this download. Used in local path. */
    name: string;
    /** URL to fetch file from */
    url: string;
    /**
     * A human-friendly string describing the version of the file, used in local
     * path.
     */
    version?: string;
}
export interface FetchToCacheFileOptions extends FetchToCacheCommon {
    /**
     * Name of the file on local disk.
     * @defaultValue Last path component from URL
     */
    file?: string;
    /** Mode (permissions) for the local file. */
    mode?: number;
}
export interface FetchToCacheTarOptions extends FetchToCacheCommon {
    tarOptions?: tar.ExtractOptions;
    fileList?: string[];
    untar: true;
}
export interface CachedFile {
    file: string;
    dir: string;
}
export interface CachedDir {
    dir: string;
}
/**
 * Fetches a file to the cache and returns the path once fetch is complete.
 *
 * @remarks
 * A directory is created that is unique to the URL to be fetched. The file
 * is downloaded into the directory and the directory can also be used for
 * storage of additional items related to this specific URL. For example,
 * this is useful when the fetched file is a multi-file archive. The archive
 * can be unpacked into the directory.
 *
 * @returns The path to the fetched file and path to the unique directory for
 * this URL.
 * @beta
 */
export declare function fetchToCache(options: FetchToCacheFileOptions): Promise<CachedFile>;
export declare function fetchToCache(options: FetchToCacheTarOptions): Promise<CachedDir>;
//# sourceMappingURL=tool-cache.d.ts.map