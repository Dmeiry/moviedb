"use strict";
/*
 * Copyright 2019-2021 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugExec = exports.streamToDebug = void 0;
const tslib_1 = require("tslib");
const execa_1 = tslib_1.__importDefault(require("execa"));
function streamToDebug(s, d, prefix) {
    prefix = prefix ? `[${prefix}] ` : "";
    s.on("data", (chunk) => d(prefix + chunk.toString()));
    s.on("error", (err) => d(prefix, err));
}
exports.streamToDebug = streamToDebug;
const execDefaults = {
    printFailure: true,
};
function debugExec(cmdDebug, outputDebug) {
    let _cmdId = 0;
    const cmdId = () => ++_cmdId;
    const exec = async (cmd, args, options = {}) => {
        const _a = Object.assign(Object.assign({}, execDefaults), options), { printFailure } = _a, opts = tslib_1.__rest(_a, ["printFailure"]);
        opts.all = true;
        const debug = outputDebug.enabled ? outputDebug.extend((cmdId()).toString()) :
            cmdDebug.enabled ? cmdDebug :
                null;
        if (debug)
            debug(`Running: ${cmd} ${args.join(" ")}`);
        try {
            const ret = execa_1.default(cmd, args, opts);
            if (outputDebug.enabled && debug) {
                streamToDebug(ret.stdout, debug);
                streamToDebug(ret.stderr, debug);
            }
            return await ret;
        }
        catch (e) {
            if (e.all)
                e.message = `${e.shortMessage}\n${e.all}`;
            if (debug && printFailure)
                debug(`FAILED: ${cmd} ${args.join(" ")}: ${e.shortMessage || e.message}`);
            throw e;
        }
    };
    return exec;
}
exports.debugExec = debugExec;
//# sourceMappingURL=debug_exec.js.map